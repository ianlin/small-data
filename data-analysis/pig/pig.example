/*
 * Examples
 */

------------------------------------------------
--Pig Macro-- ( Stored Procedure )
------------------------------------------------
IMPORT 'my_macro.pig';

DEFINE my_macro(A, sortkey) RETURNS C {
    B = FILTER $A BY my_filter(*);
    $C = ORDER B BY $sortkey;
}

X = my_macro();
STORE X INTO 'output';


------------------------------------------------
--Pig UDF--
------------------------------------------------
--Python
Register 'test.py' using jython as myfuncs;
Register 'test.py' using org.apache.pig.scripting.jython.JythonScriptEngine as myfuncs;

b = foreach a generate myfuncs.uppercase(name), myfuncs.normalise(phone);

--JAVA
REGISTER myudfs.jar;
b = foreach a generate myudfs.uppercase(name), myudfs.normalise(phone);



------------------------------------------------
--Pig Basic--
------------------------------------------------
Relation
Bag {}
Tuple ()





/*
 * 樂團簡單題
 */

orig_records = LOAD 'input/band_charts.csv'
        AS (band:chararray, album:chararray, score:int);

bands_has_winner = FILTER orig_records BY score == 1;

grouped_bands = GROUP bands_has_winner BY band;

best_band = FOREACH grouped_bands GENERATE group, COUNT(bands_has_winner.score) AS times;
--best_band2 = ORDER best_band BY
DUMP best_band;
--STORE good_toilet_group INTO 'output/toilet_ans' USING PigStorage();





/*
 * 公廁進階題
 */

orig_records = LOAD 'input/public_toilet' USING PigStorage(',')
        AS (id:chararray, name:chararray, total:float, lv1:float, lv2:float, lv3:int, lv4:int, special:int, address:chararray);

address_key = FOREACH orig_records GENERATE REGEX_EXTRACT(address, '^\u81fa\u5317\u5e02([^\u5340\u5e02]+\u5340).*', 1) AS area:chararray, total, lv1 AS good_cnt, lv3, lv4, ( (lv1 + lv2) / total ) AS good_percent:float, special;

address_key1 = FILTER address_key BY area IS NOT NULL;

grp_key = GROUP address_key1 BY area;

good_toilet_group = FOREACH grp_key {
        address_key2 =  FILTER address_key1 BY special == 1 AND good_percent >= 0.75 AND total > 0;
        GENERATE group, COUNT(address_key1) AS total , COUNT(address_key2) AS goods, SUBSTRING((chararray)((float)COUNT(address_key2)/(float)COUNT(address_key1)),0,4) AS good_rate;
}
DUMP good_toilet_group;
--STORE good_toilet_group INTO 'output/toilet_ans' USING PigStorage();







#Passing PIG Script to PYTHON and RUN
#! /usr/bin/python

from org.apache.pig.scripting import Pig

P = Pig.compileFromFile("""myscript.pig""")

input = "original"
output = "output"

result = p.bind({'in':input, 'out':output}).runSingle()
if result.isSuccessful():
    print "Pig job succeeded"
else:
    raise "Pig job failed"
